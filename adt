#!/usr/bin/env python3

import argparse
import glob
import subprocess
import os
import sys

default_release = 'impish'

def run(cmd):
    cmdarray = cmd.split(' ')
    return subprocess.run(cmdarray, capture_output=True, check=True,
                          text=True).stdout

def show(cmd):
    if type(cmd) == str:
        cmdstr = cmd
        cmd = cmd.split(' ')
    else:
        cmdstr = ' '.join(cmd)
    print(f'+ {cmdstr}')
    subprocess.run(cmd, stderr=sys.stderr, stdout=sys.stdout, check=True)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-q', '--qemu', default=False, action='store_true')
    parser.add_argument('-r', '--release', default=default_release, type=str)
    parser.add_argument('-a', '--arch', default='', type=str)
    parser.add_argument('-b', '--build', default=False, action='store_true')
    parser.add_argument('target', nargs='?')
    parser.add_argument('extra', nargs='*')
    return parser.parse_args()


def get_ubuntu_releases():
    return run('distro-info -a').splitlines()


def get_debian_releases():
    return ('stable', 'testing', 'unstable', 'sid', 'buster',
            'bullseye', 'bookworm')


args = get_args()
if args.release in get_ubuntu_releases():
    ostype = 'ubuntu'
elif args.release in get_debian_releases():
    ostype = 'debian'
else:
    raise Exception('unknown OS')

if not args.target:
    dscs = glob.glob('*.dsc')
    if not dscs:
        raise Exception('test target not found')
    if len(dscs) != 1:
        raise Exception(f'ambiguous test target - found these: {dscs}')
    args.target = dscs[0]

if not args.arch:
    args.arch = run('dpkg --print-architecture').strip()

adt = ['autopkgtest', *args.extra, args.target, '--']

if args.qemu:
    if ostype != "ubuntu":
        raise Exception('qemu adt requires ubuntu')

    image = f'/srv/qemu/autopkgtest-{args.release}-{args.arch}.img'
    adt += ['qemu', image, '--ram-size=8192', '--cpus=4']
    build = f'autopkgtest-buildvm-ubuntu-cloud -r{args.release}' \
            + ' -o/srv/qemu'

    found = os.path.exists(image)
else:
    image = f'autopkgtest/{ostype}/{args.release}/{args.arch}'
    adt += ['lxd', image]
    build = f'autopkgtest-build-lxd images:{ostype}/{args.release}'

    found = False
    image_table = run('lxc image list --format=csv').splitlines()
    for entry in image_table:
        if entry.split(',')[0] == image:
            found = True
            break

if not found:
    if args.build:
        show(build)
    else:
        raise Exception(f'''\
image {image} not found - do we need to create it?  consider command:
{build}
''')

show(adt)
